#!/usr/bin/env ruby

require 'pathname'
ABS_PATH = Pathname.new(__FILE__).realpath.dirname #.parent
$LOAD_PATH << ABS_PATH + "lib/"

require 'commander/import'

program(:version, 'unreleased')
program(:description, 'Ruby Project Generator')
program(:help, 'Author', 'Lukas Schneiderbauer <lukas.schneiderbauer@gmail.com>')
default_command :init

command :init do |c|
	c.syntax = 'rpi init [options]'
	c.summary = 'Initialize a Ruby project file structure.'
	c.description = 'Initializes a Ruby project file structure.'
	c.example('Create a ruby project called \'TestProject\' within a git-repostory.', 'rpi TestProject -g')
	c.option('-d', '--description DESCRIPTION', String, 'Set a project description.')
	c.option('-a', '--author AUTHOR', String, 'Set the project author (overrides the default setting).')
	c.option('-e', '--email EMAIL', String, 'Set the authors email address (overrides the default setting).')
	c.option('-b', '--enableebuild', 'Also create a gentoo-ebuild for a github-project.')
	c.option('-g', '--enablegit', 'Also initialize a git repository.')
	c.action do |args, options|
		options.default(:description => "<DESCRIPTION>")

		#TODO: author, email:  default to <default>
		
		init(args,options)
	end
end

command :author do |c|
	c.syntax = 'rpi author [author]'
	c.summary = 'Set or display the default author.'
	c.description = 'Sets or displays the default author used for generating the initial project structure.'
	c.example("Set default author to \'Foo Bar\'", "rpi author --name \"Foo Bar\"")
	c.example("Get the current default author", "rpi author")
	c.option('-n', '--name NAME', String, 'Set the default author name.')
	c.option('-e', '--email EMAIL', String, 'Set the default email adress.')

	c.action do |args, options|

		author = args.shift
		if author.nil?
			# display
			#todo
		else
			# set
			#todo
		end
	end
end


def init(args,options)
	projectname = args.shift || abort('Project name required. Abort.')

	# create main directory
	#
	work("Create directory #{c(projectname,:bold)}", true) do
		shell("mkdir #{projectname}", options.trace)
	end

	# create sub directories (which?)
	#
	['bin','lib','res', "lib/#{projectname}"].each do |d|
		work("Create directory #{c(projectname + "/" + d,:bold)}") do
			shell("mkdir #{projectname}/#{d}", options.trace)
		end
	end

	# create lib file
	#
	work("Build lib file #{c(projectname + "/lib/" + projectname + ".rb", :bold)}") do
		begin
			File.open("./#{projectname}/lib/#{projectname}.rb", 'w') { |f| f.write(text_lib(projectname,options)) }
			0
		rescue
			false
		end
	end

	# create binary file
	#
	work("Build bin file #{c(projectname + "/bin/" + projectname, :bold)}", true) do
		begin
			File.open("./#{projectname}/bin/#{projectname}",'w') {|f| f.write(text_bin(projectname,options))}
			`chmod +x ./#{projectname}/bin/#{projectname}`
			0
		rescue
			false
		end
	end

	# create README
	#
	work("Build README file #{c(projectname + "/README", :bold)}") do
		begin
			File.open("./#{projectname}/README",'w') {|f| f.write(text_readme(projectname,options))}
			0
		rescue
			false
		end
	end

	# copy LICENCE
	#
	work("Copy LICENSE file #{c(projectname + "/LICENCE", :bold)}") do
		begin
			File.open("./#{projectname}/LICENSE",'w') {|f| f.write(text_license(options))}
			0
		rescue
			false
		end
	end

	# create gemspec file
	#
	work("Build Gemspec #{c(projectname + "/#{projectname}.gemspec",:bold)}") do
		begin
			File.open("./#{projectname}/#{projectname}.gemspec",'w') {|f| f.write(text_gemspec(projectname,options))}
			0
		rescue
			false
		end
	end

	
	# create ebuild if enabled
	#
	work ("Create Gentoo-Ebuild #{c(projectname + "/res/#{projectname}.ebuild", :bold)}") do
		begin
			File.open("./#{projectname}/res/#{projectname}.ebuild", 'w') {|f| f.write(text_ebuild(projectname,options))}
			0
		rescue
			false
		end
	end if options.enableebuild


	# initialize git if enabled
	#
	work ("Initialize Git repository in #{c("#{projectname}",:bold)}") do
		shell("cd ./#{projectname}; git init -q; git add .; git commit -a -m 'initial commit'", options.trace)

		begin
			File.open("./#{projectname}/.gitignore","w") {|f| f.write(text_gitignore)}
			0
		rescue
			false
		end
	end if options.enablegit

	
end


LJUST=60

# covers shell calls
#
def shell(str,output)
	system("#{str} #{"> /dev/null 2>&1" unless output}")
	$?
end

# a work-step with fancy console-output
#
def work(msg, abortion=false)
	print "#{c(" *",:bold,:yellow)} #{msg.ljust(LJUST,'.')}"
	
	# execute
	#
	ret = yield
	
	puts (ret == 0 ? "[" + c("ok",:green,:bold) + "]" : "[" + c("!!",:red,:bold) + "]")

	# if abortion flag is set, abort
	if (abortion && ret != 0)
		abort("Critical error: #{c("Aborted",:red,:bold)}.")
	end	

	return ret
end

def c(*a)
	HighLine.color(*a)
end


# TEXT
# ==============================================
#
def text_license(options)
%Q{Copyright (C) 2011  #{options.author}

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
}
end

def text_readme(projectname, options)
%Q{= #{projectname} - <??>

#{options.description}


== Features

* no feature


== Requirements

* visionmedia/commander (tested against v4.1.1)
  https://github.com/visionmedia/commander/
* highline (tested against v1.6.11)
  http://rubyforge.org/projects/highline/
}
end

def text_lib(projectname,options)
%Q{module #{projectname.capitalize}

	Author = Struct.new(:name, :email)
	class Author; def to_s; self[:name] + " <" + self[:email] + ">"; end; end

	VERSION		= 'unreleased'
	AUTHORS		= [Author.new('#{options.author}','#{options.email}')]
	HOMEPAGE	= ''

end

# require ...
}
end

def text_bin(projectname, options)
%Q{#!/usr/bin/env ruby

# set process name
$0='#{projectname}'

require 'pathname'
ABS_PATH = Pathname.new(__FILE__).realpath.dirname.parent
$LOAD_PATH << ABS_PATH + "lib/"

require 'commander/import'
require '#{projectname}'

program(:version, #{projectname.capitalize}::VERSION)
program(:description, '#{options.description}')
program(:help, 'Authors', #{projectname.capitalize}::AUTHORS.collect { |e| e.to_s }.join("\\n"))
program(:help, 'Homepage', #{projectname.capitalize}::HOMEPAGE)
default_command :main

command :main do |c|
	c.syntax = '#{projectname} main [options]'
	c.summary = ''
	c.description = ''
	c.example 'description', 'command example'
	c.option '--some-switch', 'Some switch that does something'
	c.action do |args, options|
		# do something
	end
end
}
end

def text_gemspec(projectname,options)
now = Time.now
%Q{require 'rake'
require 'lib/#{projectname}'

Gem::Specification.new do |s|

	s.name		=	'#{projectname}'
	s.version	=	#{projectname.capitalize}::VERSION
	s.date		=	'#{now.year}-#{now.month.to_s.rjust(2,'0')}-#{now.mday.to_s.rjust(2,'0')}'
	s.summary	=	"#{options.description}"
	s.authors	=	#{projectname.capitalize}::AUTHORS.collect { |e| e[:name] }
	s.email		=	#{projectname.capitalize}::AUTHORS.collect { |e| e[:email] }
	s.files		=	FileList[
					"bin/*",
					"lib/*.rb",
					"lib/#{projectname}/*.rb",
					"README",
					"LICENSE"
				].to_a
	s.homepage	=	#{projectname.capitalize}::HOMEPAGE

end
}
end

def text_ebuild(projectname,options)
%Q{# Copyright 1999-2011 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# # $Header: $

EAPI=4

USE_RUBY="ruby18 ruby19"

RUBY_FAKEGEM_TASK_DOC=""

inherit ruby-fakegem

DESCRIPTION="#{options.description}"
#HOMEPAGE="HOMEPAGE"

GITHUB_USER="GITHUBUSER"
SRC_URI="https://github.com/${GITHUB_USER}/${PN}/tarball/v${PV} -> ${P}.tgz"
RUBY_S="${GITHUB_USER}-${PN}-*"

LICENSE="GPL-2"
SLOT="0"
KEYWORDS="~amd64"

RDEPEND="${RDEPEND} >=dev-ruby/commander-4.1.1"

all_ruby_install() {
       ruby_fakegem_binwrapper #{projectname} || die
}
}
end

def text_gitignore
%Q{.*.swp
*.gem
Gemfile.lock
}
end
